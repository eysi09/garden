# Javascript Node CircleCI 2.1 configuration file
version: 2.1

# Shared config to use between jobs
# These can be used to inject shared variables
# see https://blog.daemonl.com/2016/02/yaml.html
.references:
  # Configuration for our node jobs
  node-config: &node-config
    docker:
      - image: circleci/node:10
        environment:
          GARDEN_DISABLE_VERSION_CHECK: "true"
          GARDEN_TASK_CONCURRENCY_LIMIT: "10"
    resource_class: large

  # Configuration for release jobs
  release-config: &release-config
    docker:
      # Image that contains ghr for publishing releases to Github
      - image: cibuilds/github:0.10

  # Attach's the current saved workspace
  attach-workspace: &attach-workspace
    attach_workspace:
          at: ./

  # Only run jobs on master
  only-master: &only-master
    filters:
      branches:
        only: master
      tags:
        ignore: /.*/

  # Only run on versioned tags
  only-tags: &only-tags
    filters:
      branches:
        ignore: /.*/
      tags:
        # Technically could be a better regex but for now just starting with v feels good enough
        only: /v.*/

# Reuseable commands to execute in jobs
# see https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version21
# and example https://github.com/mapbox/mapbox-gl-native/blob/master/circle.yml
commands:
  npm_install:
    description: |
      Installs npm packages for root, garden-service, and dashboard and loads and saves the caches as appropriate
    steps:
      - restore_cache:
          keys:
          - root-v2-{{ checksum "package-lock.json" }}
      - restore_cache:
          keys:
          - garden-service-v2-{{ checksum "garden-service/package-lock.json" }}
      - restore_cache:
          keys:
          - dashboard-v2-{{ checksum "dashboard/package-lock.json" }}

      # only install root dependencies if node_modules wasn't cached
      - run: if [ ! -d "node_modules" ]; then npm ci; fi

      - run: npm run bootstrap

      - save_cache:
          paths: [node_modules]
          key: root-v2-{{ checksum "package-lock.json" }}
      - save_cache:
          paths: [garden-service/node_modules]
          key: garden-service-v2-{{ checksum "garden-service/package-lock.json" }}
      - save_cache:
          paths: [dashboard/node_modules]
          key: dashboard-v2-{{ checksum "dashboard/package-lock.json" }}

  docker_build:
    description: Builds and Tags a Docker Image
    parameters:
      context:
        description: Directory to build in
        type: string
        default: .
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker Image
          command: |
            # Just build it with the approprate tag
            docker build -t <<parameters.context>> <<parameters.context>>

  # Depends on attach_workspace
  include_dashboard:
    description: Copies the dashboard build directory into the garden service static directory
    steps:
      - run:
          name: Copy dashboard build to static dir
          command: |
            mkdir ./garden-service/static/dashboard
            cp -r ./dashboard/build/* ./garden-service/static/dashboard/

  docker_release:
    description: |
      Builds and publishes a docker image to the public registry.
      It automatically switches between git tag and `:master`
    parameters:
      context:
        description: Directory to build in
        type: string
        default: .
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile in working directory.
        type: string
        default: Dockerfile
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      # TODO: use garden publish here
      - deploy:
          name: Release docker image
          command: |
            # These values are inject from context docker
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # Switches between git tag and master for releases
            TAG=${CIRCLE_TAG:-master}
            docker build -t <<parameters.context>> --file <<parameters.context>>/<<parameters.dockerfile>> --build-arg TAG=$TAG <<parameters.context>>
            docker tag <<parameters.context>>  <<parameters.registry>>/<<parameters.image>>:$TAG
            docker push <<parameters.registry>>/<<parameters.image>>:$TAG
            # Set the latest tag as well for tagged releases
            if [ "$TAG" == "$CIRCLE_TAG" ]; then
              docker tag <<parameters.context>>  <<parameters.registry>>/<<parameters.image>>:latest
              docker push <<parameters.registry>>/<<parameters.image>>:latest
            fi

  configure_kubectl_context:
    description: Configure the kubectl context so that we can access our remote cluster. Used for integration testing.
    steps:
      - run:
          name: Install binary dependencies
          command: |
            mkdir -p $HOME/bin
            cd $HOME/bin
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/linux/amd64/kubectl
            chmod +x kubectl
            echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install gcloud
          command: |
            mkdir $HOME/gcloud
            curl https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz | tar xvz -C $HOME/gcloud
            $HOME/gcloud/google-cloud-sdk/install.sh --quiet
            echo 'export PATH=$HOME/gcloud/google-cloud-sdk/bin:$PATH' >> $BASH_ENV
      - run:
          name: Configure kubectl context via gcloud and authenticate to Google Container Registry
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project $GOOGLE_PROJECT_ID && gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            gcloud --quiet container clusters get-credentials $GOOGLE_CLUSTER_ID --zone $GOOGLE_COMPUTE_ZONE
            gcloud --quiet auth configure-docker

  build_service_dist:
    description: Package built code into executables and persist to garden-service/dist directory
    parameters:
      version:
        description: |
          The version tag used when building. Use to override the version string in the generated zip file names,
          e.g. when creating unstable releases. The script defaults to using the version in garden-service/package.json.
        type: string
        default: ""
    steps:
      - checkout
      - npm_install
      - run: sudo apt-get update && sudo apt-get -y install rsync
      - *attach-workspace
      - include_dashboard
      - run:
          name: Run dist command with the appropriate argument
          command: npm run dist -- -- <<parameters.version>>
      - persist_to_workspace:
          root: ./
          paths:
            - garden-service/dist/
#
# Jobs section
#
jobs:
  build-service:
    <<: *node-config
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install rsync
      - npm_install
      - run:
          name: build
          command: |
            npm run build-ci
      # Save the built output to be used for the docker image and for the release steps
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ./
          # Must be relative path from root
          paths:
            # Save the built output for future
            - dashboard/build/
            - garden-service/build/
            - garden-service/static/
  lint:
    <<: *node-config
    steps:
      - checkout
      - npm_install
      - *attach-workspace
      - run:
          name: Make sure generated docs are up-to-date
          command: npm run check-docs
      - run:
          name: lint
          command: npm run lint
  test-service:
    <<: *node-config
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install rsync
      - setup_remote_docker
      - npm_install
      - *attach-workspace
      - run:
          name: Configure git (needed for some tests)
          command: |
            git config --global user.name "Garden CI"
            git config --global user.email "admin@garden.io"
      - run:
          name: test
          command: |
            cd garden-service
            npm test
          environment:
            CHOKIDAR_USEPOLLING: "1"
  integ-test-service:
    <<: *node-config
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install rsync
      - npm_install
      - configure_kubectl_context
      - *attach-workspace
      - run:
          name: Init Garden
          command: ./garden-service/bin/garden init --root garden-service/test/integ --logger-type basic
      - run:
          name: Run integration tests
          command: ./garden-service/bin/garden test integ-tests --root garden-service/test/integ --logger-type basic
      - run:
          name: Cleanup
          command: kubectl delete --wait=false $(kubectl get ns -o name | grep $CIRCLE_BUILD_NUM) || true
          when: always
  test-dashboard:
    <<: *node-config
    steps:
      - checkout
      - npm_install
      - *attach-workspace
      - run:
          name: Test dashboard
          command: |
            cd dashboard
            npm test
  build-service-docker:
    <<: *node-config
    steps:
      - checkout
      # This is to copy the pre-build build output from test-service (this should be a different step)
      - *attach-workspace
      - include_dashboard
      - docker_build:
          context: garden-service
  release-service-docker:
    <<: *node-config
    steps:
      - checkout
      # This is to copy the pre-build build output from test-service (this should be a different step)
      - *attach-workspace
      - docker_release:
          context: garden-service
          image: $DOCKER_ORG/garden
  release-service-docker-gcloud:
    <<: *node-config
    steps:
      - checkout
      # This is to copy the pre-build build output from test-service (this should be a different step)
      - *attach-workspace
      - docker_release:
          context: garden-service
          image: $DOCKER_ORG/garden-gcloud
          dockerfile: gcloud.Dockerfile
  build-service-dist:
    <<: *node-config
    steps:
      - build_service_dist:
          version: $(./garden-service/bin/garden --version)
  build-service-dist-next:
    <<: *node-config
    steps:
      - build_service_dist:
          version: next
  release-service-dist:
    <<: *release-config
    steps:
      # Need to checkout to read version from garden-service/package.json
      - checkout
      - *attach-workspace
      - run:
          name: "Create a draft release on GitHub"
          command: |
            VERSION="v$(cat garden-service/package.json | jq -r .version)"
            PRERELEASE=""
            if [[ $VERSION == *"-"* ]]; then PRERELEASE=-prerelease; fi
            ghr \
              -t ${GIT_AUTH_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -delete \
              -draft \
              ${PRERELEASE} \
              ${VERSION} ./garden-service/dist
  release-service-dist-next:
    <<: *release-config
    steps:
      - *attach-workspace
      - run:
          name: "Publish a pre-release on GitHub with the tag 'next'"
          command: |
            ghr \
              -t ${GIT_AUTH_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -delete \
              -prerelease \
              next ./garden-service/dist

workflows:
  version: 2
  commit:
    jobs:
      - build-service
      #- test-service:
      #    requires:
      #      - build-service
      #- lint:
      #    requires:
      #      - build-service
      #- integ-test-service:
      #    # Don't attempt to run integ tests for external PRs (they won't have access to the required keys)
      #    filters:
      #      branches:
      #        # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
      #        ignore: /pull\/[0-9]+/
      #    requires:
      #      - build-service
      #- test-dashboard:
      #    requires:
      #      - build-service
      - build-service-dist-next:
          requires:
            - build-service
      - release-service-dist-next:
          requires:
            - build-service-dist-next
      - build-service-dist:
          requires:
            - build-service
      - release-service-dist:
          requires:
            - build-service-dist


  master:
    jobs:
      # Duplicated here so we can reference steps that depends on it
      - build-service:
          <<: *only-master
      - lint:
          <<: *only-master
          requires:
            - build-service
      - test-service:
          <<: *only-master
          requires:
            - build-service
      - test-dashboard:
          <<: *only-master
      - release-service-docker:
          <<: *only-master
          context: docker
          requires:
            - build-service
      - release-service-docker-gcloud:
          <<: *only-master
          context: docker
          requires:
            - release-service-docker
      - build-service-dist-next:
          <<: *only-master
          requires:
            - build-service
      - release-service-dist-next:
          <<: *only-master
          requires:
            - build-service-dist-next

  tags:
    jobs:
      # Duplicated here so we can reference steps that depends on it
      - build-service:
          <<: *only-tags
      - lint:
          <<: *only-tags
          requires:
          - build-service
      - test-service:
          <<: *only-tags
          requires:
          - build-service
      - test-dashboard:
          <<: *only-tags
      - release-service-docker:
          <<: *only-tags
          context: docker
          requires:
            - build-service
      - release-service-docker-gcloud:
          <<: *only-tags
          context: docker
          requires:
            - release-service-docker
      - build-service-dist:
          <<: *only-tags
          requires:
            - build-service
      - release-service-dist:
          <<: *only-tags
          requires:
            - build-service-dist

