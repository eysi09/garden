# Javascript Node CircleCI 2.1 configuration file
# PR bump 1
version: 2.1

# Shared config to use between jobs
# These can be used to inject shared variables
# see https://blog.daemonl.com/2016/02/yaml.html
.references:
  # Configuration for our node jobs
  node-config: &node-config
    docker:
      - image: circleci/node:10

  # Configuration for garden agent
  garden-agent: &garden-agent
    docker:
      - image: gardenengine/cc-agent:latest

  # Attach's the current saved workspace
  attach-workspace: &attach-workspace
    attach_workspace:
          at: ./

  # Only run jobs on master
  only-master: &only-master
    filters:
      branches:
        only: master
      tags:
        ignore: /.*/

  # Only run on versioned tags
  only-tags: &only-tags
    filters:
      branches:
        ignore: /.*/
      tags:
        # Technically could be a better regex but for now just starting with v feels good enough
        only: /v.*/

# Reuseable commands to execute in jobs
# see https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version21
# and example https://github.com/mapbox/mapbox-gl-native/blob/master/circle.yml
commands:
  npm_install:
    description: |
      Installs npm packages for root, garden-service, and dashboard and loads and saves the caches as appropriate
    steps:
      - restore_cache:
          keys:
          - root-{{ checksum "package-lock.json" }}
      - restore_cache:
          keys:
          - garden-service-{{ checksum "garden-service/package-lock.json" }}
      - restore_cache:
          keys:
          - dashboard-{{ checksum "dashboard/package-lock.json" }}
      # only install if node_modules wasn't cached
      - run: if [ ! -d "node_modules" ]; then npm ci; fi
      - save_cache:
          paths: [node_modules]
          key: root-{{ checksum "package-lock.json" }}

      - run: if [ ! -d "garden-service/node_modules" ]; then cd garden-service && npm ci; fi
      - save_cache:
          paths: [garden-service/node_modules]
          key: garden-service-{{ checksum "garden-service/package-lock.json" }}

      - run: if [ ! -d "dashboard/node_modules" ]; then cd dashboard && npm ci; fi
      - save_cache:
          paths: [dashboard/node_modules]
          key: dashboard-{{ checksum "dashboard/package-lock.json" }}

  docker_build:
    description: Builds and Tags a Docker Image
    parameters:
      context:
        description: Directory to build in
        type: string
        default: .
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker Image
          command: |
            # Just build it with the approprate tag
            docker build -t << parameters.context >> << parameters.context >>

  # Depends on attach_workspace
  include_dashboard:
    description: Copies the dashboard build directory into the garden service static directory
    steps:
      - run:
          name: Copy dashboard build to static dir
          command: |
            mkdir ./garden-service/static/dashboard
            cp -r ./dashboard/build/* ./garden-service/static/dashboard/

  install_garden:
    description: Installs the Garden CLI and it's dependencies
    steps:
      - run:
          name: Install Garden dependencies
          command: |
            sudo apt-get update && sudo apt-get install rsync
            mkdir $HOME/kubectl
            curl -L -o $HOME/kubectl/kubectl "https://storage.googleapis.com/kubernetes-release/release/v1.11.3/bin/linux/amd64/kubectl"
            chmod +x $HOME/kubectl/kubectl
            echo 'export PATH=$HOME/kubectl:$PATH' >> $BASH_ENV

      - run:
          name: Install the Garden CLI
          command: |
            mkdir $HOME/garden
            curl -L https://github.com/garden-io/garden/releases/download/v0.9.6/garden-v0.9.6-linux-amd64.tar.gz | tar xvz -C $HOME/garden --strip-components=1
            echo 'export PATH=$HOME/garden:$PATH' >> $BASH_ENV

  install_gcloud:
    description: Installs the GCloud CLI
    steps:
      - run:
          name: Install GCloud
          command: |
            mkdir $HOME/gcloud
            curl https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz | tar xvz -C $HOME/gcloud
            $HOME/gcloud/google-cloud-sdk/install.sh --quiet
            echo 'export PATH=$HOME/gcloud/google-cloud-sdk/bin:$PATH' >> $BASH_ENV

  docker_release:
    description: |
      Builds and publishes a docker image to the public registry.
      It automatically switches between git tag and `:master`
    parameters:
      context:
        description: Directory to build in
        type: string
        default: .
      dockerfile:
        description: Name of dockerfile to use. Defaults to Dockerfile in working directory.
        type: string
        default: Dockerfile
      image:
        description: Name of image to create. Defaults to a combination of $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME.
        type: string
        default: $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME
      registry:
        description: Name of registry to use. Defaults to docker.io.
        type: string
        default: docker.io
      release:
        description: to release to public registry or not
        type: boolean
        default: false
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - deploy:
          name: Release docker image
          command: |
            # These values are inject from context docker
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # Switches between git tag and master for releases
            TAG=${CIRCLE_TAG:-master}
            docker build -t << parameters.context >> << parameters.context >>
            docker tag << parameters.context >>  << parameters.registry >>/<< parameters.image >>:$TAG
            docker push << parameters.registry >>/<< parameters.image >>:$TAG

#
# Jobs section
#
jobs:
  build-service-docker:
    <<: *node-config
    steps:
      - checkout
      # This is to copy the pre-build build output from test-service (this should be a different step)
      - *attach-workspace
      - include_dashboard
      - docker_build:
          context: garden-service
  release-service-docker:
    <<: *node-config
    steps:
      - checkout
      # This is to copy the pre-build build output from test-service (this should be a different step)
      - *attach-workspace
      - docker_release:
          context: garden-service
          image: $DOCKER_ORG/garden-service
  build-service:
    <<: *node-config
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install rsync
      - setup_remote_docker:
          docker_layer_caching: true
      - npm_install
      - run:
          name: build
          command: |
            cd garden-service
            npm run build-ci
      # Save the built output to be used for the docker image and for the release steps
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ./
          # Must be relative path from root
          paths:
            # Save the built output for future
            - garden-service/build/
            - garden-service/static/

  test-garden-agent:
    <<: *node-config
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - install_garden
      - install_gcloud
      - run:
          name: Clone simple-project-remote
          command: git clone https://$GIT_USER:$GIT_AUTH_TOKEN@github.com/garden-io/simple-project-remote.git
      - run:
          name: Configure kubectl context
          command: |
            gcloud --quiet components update
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project $GOOGLE_PROJECT_ID && gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            gcloud --quiet container clusters get-credentials $GOOGLE_CLUSTER_ID --zone $GOOGLE_COMPUTE_ZONE
            gcloud --quiet auth configure-docker
      - run:
          name: Check Docker version
          command: docker version
      - run:
          name: Deploy project
          command: GARDEN_LOGGER_TYPE=basic garden deploy --env=remote --root=simple-project-remote

  test-service:
    <<: *node-config
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install rsync
      - setup_remote_docker:
          docker_layer_caching: true
      - npm_install
      - *attach-workspace
      - run:
          name: Configure git (needed for some tests)
          command: |
            git config --global user.name "Garden CI"
            git config --global user.email "admin@garden.io"
      - run:
          name: Check docs, licenses, lint etc
          command: npm run check-all
      - run:
          name: test
          command: |
            cd garden-service
            npm test
          environment:
            CHOKIDAR_USEPOLLING: "1"
  test-dashboard:
    <<: *node-config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - npm_install
      - run:
          name: Test dashboard
          command: |
            cd dashboard
            npm test
  build-dashboard:
    <<: *node-config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - npm_install
      - run:
          name: Build dashboard
          command: |
            cd dashboard
            npm run build-ci
      # Save the built output to be used for the docker image and for the release steps
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ./
          # Must be relative path from root
          paths:
            # Save the built output for future
            - dashboard/build/
  release-service-pkg:
    <<: *node-config
    steps:
      - checkout
      - npm_install
      - run: sudo apt-get update && sudo apt-get -y install rsync
      - *attach-workspace
      - include_dashboard
      - run: sudo npm install -g pkg
      - run:
          command: ./garden-service/bin/build-pkg.sh
      - store_artifacts:
          path: garden-service/dist/
          destination: /downloads

workflows:
  version: 2
  commit:
    jobs:
      - test-garden-agent
      # - build-service
      # - test-service
      # - build-dashboard
      # - test-dashboard
  master:
    jobs:
      # Duplicated here so we can reference steps that depends on it
      - build-service:
          <<: *only-master
      - test-service:
          <<: *only-master
          requires:
            - build-service
      - build-dashboard:
          <<: *only-master
      - test-dashboard:
          <<: *only-master
      - release-service-docker:
          <<: *only-master
          context: docker
          requires:
            - build-service
            - build-dashboard
      - release-service-pkg:
          <<: *only-master
          requires:
            - build-service
            - build-dashboard

  tags:
    jobs:
      # Duplicated here so we can reference steps that depends on it
      - build-service:
          <<: *only-tags
      - test-service:
          <<: *only-tags
          requires:
          - build-service
      - build-dashboard:
          <<: *only-tags
      - test-dashboard:
          <<: *only-tags
      - release-service-docker:
          <<: *only-tags
          context: docker
          requires:
            - build-service
            - build-dashboard
      - release-service-pkg:
          <<: *only-tags
          requires:
            - build-service
            - build-dashboard
