/*
 * Copyright (C) 2018 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

import * as Joi from "joi"
import dedent = require("dedent")

import {
  joiArray,
  joiIdentifier,
  validate,
} from "../../config/common"
import { GardenPlugin } from "../../types/plugin/plugin"
import { Provider, providerConfigBaseSchema, ProviderConfig } from "../../config/project"
import {
  prepareEnvironment,
  deleteSecret,
  cleanupEnvironment,
  deleteService,
  execInService,
  getSecret,
  getEnvironmentStatus,
  getServiceLogs,
  getServiceOutputs,
  getTestResult,
  hotReload,
  setSecret,
  testModule,
  getLoginStatus,
  login,
  logout,
  runModule,
  runService,
} from "./actions"
import { deployContainerService, getContainerServiceStatus } from "./deployment"
import { helmHandlers } from "./helm"

export const name = "kubernetes"

export interface SecretRef {
  name: string
  namespace: string
}

export interface IngressTlsCertificate {
  name: string
  hostnames?: string[]
  secretRef: SecretRef
}

export interface KubernetesConfig extends ProviderConfig {
  context: string
  defaultHostname?: string
  defaultUsername?: string
  forceSsl: boolean
  ingressHttpPort: number
  ingressHttpsPort: number
  ingressClass: string
  namespace?: string
  tlsCertificates: IngressTlsCertificate[]
}

export type KubernetesProvider = Provider<KubernetesConfig>

const secretRef = Joi.object()
  .keys({
    name: joiIdentifier()
      .required()
      .description("The name of the Kubernetes secret.")
      .example("my-secret"),
    namespace: joiIdentifier()
      .default("default")
      .description(
        "The namespace where the secret is stored. " +
        "If necessary, the secret may be copied to the appropriate namespace before use.",
      ),
  })
  .description("Reference to a Kubernetes secret.")

const tlsCertificateSchema = Joi.object()
  .keys({
    name: joiIdentifier()
      .required()
      .description("A unique identifier for this certificate.")
      .example("www")
      .example("wildcard"),
    hostnames: Joi.array().items(Joi.string().hostname())
      .description(
        "A list of hostnames that this certificate should be used for. " +
        "If you don't specify these, they will be automatically read from the certificate.",
      )
      .example(["www.mydomain.com"]),
    secretRef: secretRef
      .description("A reference to the Kubernetes secret that contains the TLS certificate and key for the domain.")
      .example({ name: "my-tls-secret", namespace: "default" }),
  })

const kubernetesConfigBase = providerConfigBaseSchema
  .keys({
    context: Joi.string()
      .required()
      .description("The kubectl context to use to connect to the Kubernetes cluster.")
      .example("my-dev-context"),
    defaultHostname: Joi.string()
      .description("A default hostname to use when no hostname is explicitly configured for a service.")
      .example("api.mydomain.com"),
    defaultUsername: joiIdentifier()
      .description("Set a default username (used for namespacing within a cluster)."),
    forceSsl: Joi.boolean()
      .default(false)
      .description(
        "Require SSL on all services. If set to true, an error is raised when no certificate " +
        "is available for a configured hostname.",
      ),
    namespace: Joi.string()
      .description(
        "Specify which namespace to deploy services to (auto-generated by default). " +
        "Note that the framework generates other namespaces as well with this name as a prefix.",
      ),
    tlsCertificates: joiArray(tlsCertificateSchema)
      .unique("name")
      .description("One or more certificates to use for ingress."),
  })

const configSchema = kubernetesConfigBase
  .keys({
    ingressClass: Joi.string()
      .default("nginx")
      .description(dedent`
        The ingress class to use on configured Ingresses when deploying services. **Note that Garden
        currently only supports the nginx ingress controller.**
      `),
    ingressHttpPort: Joi.number()
      .default(80)
      .description("The external HTTP port of the cluster's ingress controller."),
    ingressHttpsPort: Joi.number()
      .default(443)
      .description("The external HTTPS port of the cluster's ingress controller."),
    _system: Joi.any().meta({ internal: true }),
  })

export function gardenPlugin({ config }: { config: KubernetesConfig }): GardenPlugin {
  config = validate(config, configSchema, { context: "kubernetes provider config" })

  return {
    config,
    actions: {
      getEnvironmentStatus,
      prepareEnvironment,
      cleanupEnvironment,
      getSecret,
      setSecret,
      deleteSecret,
      getLoginStatus,
      login,
      logout,
    },
    moduleActions: {
      container: {
        getServiceStatus: getContainerServiceStatus,
        deployService: deployContainerService,
        deleteService,
        getServiceOutputs,
        execInService,
        runModule,
        hotReload,
        testModule,
        runService,
        getTestResult,
        getServiceLogs,
      },
      helm: helmHandlers,
    },
  }
}
